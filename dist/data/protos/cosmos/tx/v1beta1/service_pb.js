"use strict";
// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/tx/v1beta1/service.proto (package cosmos.tx.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxDecodeAminoResponse = exports.TxDecodeAminoRequest = exports.TxEncodeAminoResponse = exports.TxEncodeAminoRequest = exports.TxEncodeResponse = exports.TxEncodeRequest = exports.TxDecodeResponse = exports.TxDecodeRequest = exports.GetBlockWithTxsResponse = exports.GetBlockWithTxsRequest = exports.GetTxResponse = exports.GetTxRequest = exports.SimulateResponse = exports.SimulateRequest = exports.BroadcastTxResponse = exports.BroadcastTxRequest = exports.GetTxsEventResponse = exports.GetTxsEventRequest = exports.BroadcastMode = exports.OrderBy = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const pagination_pb_js_1 = require("../../base/query/v1beta1/pagination_pb.js");
const tx_pb_js_1 = require("./tx_pb.js");
const abci_pb_js_1 = require("../../base/abci/v1beta1/abci_pb.js");
const types_pb_js_1 = require("../../../tendermint/types/types_pb.js");
const block_pb_js_1 = require("../../../tendermint/types/block_pb.js");
/**
 * OrderBy defines the sorting order
 *
 * @generated from enum cosmos.tx.v1beta1.OrderBy
 */
var OrderBy;
(function (OrderBy) {
    /**
     * ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.
     *
     * @generated from enum value: ORDER_BY_UNSPECIFIED = 0;
     */
    OrderBy[OrderBy["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * ORDER_BY_ASC defines ascending order
     *
     * @generated from enum value: ORDER_BY_ASC = 1;
     */
    OrderBy[OrderBy["ASC"] = 1] = "ASC";
    /**
     * ORDER_BY_DESC defines descending order
     *
     * @generated from enum value: ORDER_BY_DESC = 2;
     */
    OrderBy[OrderBy["DESC"] = 2] = "DESC";
})(OrderBy || (exports.OrderBy = OrderBy = {}));
// Retrieve enum metadata with: proto3.getEnumType(OrderBy)
protobuf_1.proto3.util.setEnumType(OrderBy, "cosmos.tx.v1beta1.OrderBy", [
    { no: 0, name: "ORDER_BY_UNSPECIFIED" },
    { no: 1, name: "ORDER_BY_ASC" },
    { no: 2, name: "ORDER_BY_DESC" },
]);
/**
 * BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.
 *
 * @generated from enum cosmos.tx.v1beta1.BroadcastMode
 */
var BroadcastMode;
(function (BroadcastMode) {
    /**
     * zero-value for mode ordering
     *
     * @generated from enum value: BROADCAST_MODE_UNSPECIFIED = 0;
     */
    BroadcastMode[BroadcastMode["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * DEPRECATED: use BROADCAST_MODE_SYNC instead,
     * BROADCAST_MODE_BLOCK is not supported by the SDK from v0.47.x onwards.
     *
     * @generated from enum value: BROADCAST_MODE_BLOCK = 1 [deprecated = true];
     * @deprecated
     */
    BroadcastMode[BroadcastMode["BLOCK"] = 1] = "BLOCK";
    /**
     * BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
     * a CheckTx execution response only.
     *
     * @generated from enum value: BROADCAST_MODE_SYNC = 2;
     */
    BroadcastMode[BroadcastMode["SYNC"] = 2] = "SYNC";
    /**
     * BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
     * immediately.
     *
     * @generated from enum value: BROADCAST_MODE_ASYNC = 3;
     */
    BroadcastMode[BroadcastMode["ASYNC"] = 3] = "ASYNC";
})(BroadcastMode || (exports.BroadcastMode = BroadcastMode = {}));
// Retrieve enum metadata with: proto3.getEnumType(BroadcastMode)
protobuf_1.proto3.util.setEnumType(BroadcastMode, "cosmos.tx.v1beta1.BroadcastMode", [
    { no: 0, name: "BROADCAST_MODE_UNSPECIFIED" },
    { no: 1, name: "BROADCAST_MODE_BLOCK" },
    { no: 2, name: "BROADCAST_MODE_SYNC" },
    { no: 3, name: "BROADCAST_MODE_ASYNC" },
]);
/**
 * GetTxsEventRequest is the request type for the Service.TxsByEvents
 * RPC method.
 *
 * @generated from message cosmos.tx.v1beta1.GetTxsEventRequest
 */
class GetTxsEventRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * events is the list of transaction event type.
         *
         * @generated from field: repeated string events = 1;
         */
        this.events = [];
        /**
         * @generated from field: cosmos.tx.v1beta1.OrderBy order_by = 3;
         */
        this.orderBy = OrderBy.UNSPECIFIED;
        /**
         * page is the page number to query, starts at 1. If not provided, will default to first page.
         *
         * @generated from field: uint64 page = 4;
         */
        this.page = protobuf_1.protoInt64.zero;
        /**
         * limit is the total number of results to be returned in the result page.
         * If left empty it will default to a value to be set by each app.
         *
         * @generated from field: uint64 limit = 5;
         */
        this.limit = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetTxsEventRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetTxsEventRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetTxsEventRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetTxsEventRequest, a, b);
    }
}
exports.GetTxsEventRequest = GetTxsEventRequest;
GetTxsEventRequest.runtime = protobuf_1.proto3;
GetTxsEventRequest.typeName = "cosmos.tx.v1beta1.GetTxsEventRequest";
GetTxsEventRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: pagination_pb_js_1.PageRequest },
    { no: 3, name: "order_by", kind: "enum", T: protobuf_1.proto3.getEnumType(OrderBy) },
    { no: 4, name: "page", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * GetTxsEventResponse is the response type for the Service.TxsByEvents
 * RPC method.
 *
 * @generated from message cosmos.tx.v1beta1.GetTxsEventResponse
 */
class GetTxsEventResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * txs is the list of queried transactions.
         *
         * @generated from field: repeated cosmos.tx.v1beta1.Tx txs = 1;
         */
        this.txs = [];
        /**
         * tx_responses is the list of queried TxResponses.
         *
         * @generated from field: repeated cosmos.base.abci.v1beta1.TxResponse tx_responses = 2;
         */
        this.txResponses = [];
        /**
         * total is total number of results available
         *
         * @generated from field: uint64 total = 4;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetTxsEventResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetTxsEventResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetTxsEventResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetTxsEventResponse, a, b);
    }
}
exports.GetTxsEventResponse = GetTxsEventResponse;
GetTxsEventResponse.runtime = protobuf_1.proto3;
GetTxsEventResponse.typeName = "cosmos.tx.v1beta1.GetTxsEventResponse";
GetTxsEventResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "txs", kind: "message", T: tx_pb_js_1.Tx, repeated: true },
    { no: 2, name: "tx_responses", kind: "message", T: abci_pb_js_1.TxResponse, repeated: true },
    { no: 3, name: "pagination", kind: "message", T: pagination_pb_js_1.PageResponse },
    { no: 4, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
 * RPC method.
 *
 * @generated from message cosmos.tx.v1beta1.BroadcastTxRequest
 */
class BroadcastTxRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * tx_bytes is the raw transaction.
         *
         * @generated from field: bytes tx_bytes = 1;
         */
        this.txBytes = new Uint8Array(0);
        /**
         * @generated from field: cosmos.tx.v1beta1.BroadcastMode mode = 2;
         */
        this.mode = BroadcastMode.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BroadcastTxRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BroadcastTxRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BroadcastTxRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BroadcastTxRequest, a, b);
    }
}
exports.BroadcastTxRequest = BroadcastTxRequest;
BroadcastTxRequest.runtime = protobuf_1.proto3;
BroadcastTxRequest.typeName = "cosmos.tx.v1beta1.BroadcastTxRequest";
BroadcastTxRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "tx_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "mode", kind: "enum", T: protobuf_1.proto3.getEnumType(BroadcastMode) },
]);
/**
 * BroadcastTxResponse is the response type for the
 * Service.BroadcastTx method.
 *
 * @generated from message cosmos.tx.v1beta1.BroadcastTxResponse
 */
class BroadcastTxResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BroadcastTxResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BroadcastTxResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BroadcastTxResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BroadcastTxResponse, a, b);
    }
}
exports.BroadcastTxResponse = BroadcastTxResponse;
BroadcastTxResponse.runtime = protobuf_1.proto3;
BroadcastTxResponse.typeName = "cosmos.tx.v1beta1.BroadcastTxResponse";
BroadcastTxResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "tx_response", kind: "message", T: abci_pb_js_1.TxResponse },
]);
/**
 * SimulateRequest is the request type for the Service.Simulate
 * RPC method.
 *
 * @generated from message cosmos.tx.v1beta1.SimulateRequest
 */
class SimulateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * tx_bytes is the raw transaction.
         *
         * Since: cosmos-sdk 0.43
         *
         * @generated from field: bytes tx_bytes = 2;
         */
        this.txBytes = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SimulateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SimulateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SimulateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SimulateRequest, a, b);
    }
}
exports.SimulateRequest = SimulateRequest;
SimulateRequest.runtime = protobuf_1.proto3;
SimulateRequest.typeName = "cosmos.tx.v1beta1.SimulateRequest";
SimulateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "tx", kind: "message", T: tx_pb_js_1.Tx },
    { no: 2, name: "tx_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * SimulateResponse is the response type for the
 * Service.SimulateRPC method.
 *
 * @generated from message cosmos.tx.v1beta1.SimulateResponse
 */
class SimulateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SimulateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SimulateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SimulateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SimulateResponse, a, b);
    }
}
exports.SimulateResponse = SimulateResponse;
SimulateResponse.runtime = protobuf_1.proto3;
SimulateResponse.typeName = "cosmos.tx.v1beta1.SimulateResponse";
SimulateResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "gas_info", kind: "message", T: abci_pb_js_1.GasInfo },
    { no: 2, name: "result", kind: "message", T: abci_pb_js_1.Result },
]);
/**
 * GetTxRequest is the request type for the Service.GetTx
 * RPC method.
 *
 * @generated from message cosmos.tx.v1beta1.GetTxRequest
 */
class GetTxRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * hash is the tx hash to query, encoded as a hex string.
         *
         * @generated from field: string hash = 1;
         */
        this.hash = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetTxRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetTxRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetTxRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetTxRequest, a, b);
    }
}
exports.GetTxRequest = GetTxRequest;
GetTxRequest.runtime = protobuf_1.proto3;
GetTxRequest.typeName = "cosmos.tx.v1beta1.GetTxRequest";
GetTxRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * GetTxResponse is the response type for the Service.GetTx method.
 *
 * @generated from message cosmos.tx.v1beta1.GetTxResponse
 */
class GetTxResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetTxResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetTxResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetTxResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetTxResponse, a, b);
    }
}
exports.GetTxResponse = GetTxResponse;
GetTxResponse.runtime = protobuf_1.proto3;
GetTxResponse.typeName = "cosmos.tx.v1beta1.GetTxResponse";
GetTxResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "tx", kind: "message", T: tx_pb_js_1.Tx },
    { no: 2, name: "tx_response", kind: "message", T: abci_pb_js_1.TxResponse },
]);
/**
 * GetBlockWithTxsRequest is the request type for the Service.GetBlockWithTxs
 * RPC method.
 *
 * Since: cosmos-sdk 0.45.2
 *
 * @generated from message cosmos.tx.v1beta1.GetBlockWithTxsRequest
 */
class GetBlockWithTxsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * height is the height of the block to query.
         *
         * @generated from field: int64 height = 1;
         */
        this.height = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetBlockWithTxsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetBlockWithTxsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetBlockWithTxsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetBlockWithTxsRequest, a, b);
    }
}
exports.GetBlockWithTxsRequest = GetBlockWithTxsRequest;
GetBlockWithTxsRequest.runtime = protobuf_1.proto3;
GetBlockWithTxsRequest.typeName = "cosmos.tx.v1beta1.GetBlockWithTxsRequest";
GetBlockWithTxsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "pagination", kind: "message", T: pagination_pb_js_1.PageRequest },
]);
/**
 * GetBlockWithTxsResponse is the response type for the Service.GetBlockWithTxs method.
 *
 * Since: cosmos-sdk 0.45.2
 *
 * @generated from message cosmos.tx.v1beta1.GetBlockWithTxsResponse
 */
class GetBlockWithTxsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * txs are the transactions in the block.
         *
         * @generated from field: repeated cosmos.tx.v1beta1.Tx txs = 1;
         */
        this.txs = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetBlockWithTxsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetBlockWithTxsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetBlockWithTxsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetBlockWithTxsResponse, a, b);
    }
}
exports.GetBlockWithTxsResponse = GetBlockWithTxsResponse;
GetBlockWithTxsResponse.runtime = protobuf_1.proto3;
GetBlockWithTxsResponse.typeName = "cosmos.tx.v1beta1.GetBlockWithTxsResponse";
GetBlockWithTxsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "txs", kind: "message", T: tx_pb_js_1.Tx, repeated: true },
    { no: 2, name: "block_id", kind: "message", T: types_pb_js_1.BlockID },
    { no: 3, name: "block", kind: "message", T: block_pb_js_1.Block },
    { no: 4, name: "pagination", kind: "message", T: pagination_pb_js_1.PageResponse },
]);
/**
 * TxDecodeRequest is the request type for the Service.TxDecode
 * RPC method.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.tx.v1beta1.TxDecodeRequest
 */
class TxDecodeRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * tx_bytes is the raw transaction.
         *
         * @generated from field: bytes tx_bytes = 1;
         */
        this.txBytes = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TxDecodeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TxDecodeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TxDecodeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TxDecodeRequest, a, b);
    }
}
exports.TxDecodeRequest = TxDecodeRequest;
TxDecodeRequest.runtime = protobuf_1.proto3;
TxDecodeRequest.typeName = "cosmos.tx.v1beta1.TxDecodeRequest";
TxDecodeRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "tx_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * TxDecodeResponse is the response type for the
 * Service.TxDecode method.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.tx.v1beta1.TxDecodeResponse
 */
class TxDecodeResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TxDecodeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TxDecodeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TxDecodeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TxDecodeResponse, a, b);
    }
}
exports.TxDecodeResponse = TxDecodeResponse;
TxDecodeResponse.runtime = protobuf_1.proto3;
TxDecodeResponse.typeName = "cosmos.tx.v1beta1.TxDecodeResponse";
TxDecodeResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "tx", kind: "message", T: tx_pb_js_1.Tx },
]);
/**
 * TxEncodeRequest is the request type for the Service.TxEncode
 * RPC method.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.tx.v1beta1.TxEncodeRequest
 */
class TxEncodeRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TxEncodeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TxEncodeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TxEncodeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TxEncodeRequest, a, b);
    }
}
exports.TxEncodeRequest = TxEncodeRequest;
TxEncodeRequest.runtime = protobuf_1.proto3;
TxEncodeRequest.typeName = "cosmos.tx.v1beta1.TxEncodeRequest";
TxEncodeRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "tx", kind: "message", T: tx_pb_js_1.Tx },
]);
/**
 * TxEncodeResponse is the response type for the
 * Service.TxEncode method.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.tx.v1beta1.TxEncodeResponse
 */
class TxEncodeResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * tx_bytes is the encoded transaction bytes.
         *
         * @generated from field: bytes tx_bytes = 1;
         */
        this.txBytes = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TxEncodeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TxEncodeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TxEncodeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TxEncodeResponse, a, b);
    }
}
exports.TxEncodeResponse = TxEncodeResponse;
TxEncodeResponse.runtime = protobuf_1.proto3;
TxEncodeResponse.typeName = "cosmos.tx.v1beta1.TxEncodeResponse";
TxEncodeResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "tx_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * TxEncodeAminoRequest is the request type for the Service.TxEncodeAmino
 * RPC method.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.tx.v1beta1.TxEncodeAminoRequest
 */
class TxEncodeAminoRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string amino_json = 1;
         */
        this.aminoJson = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TxEncodeAminoRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TxEncodeAminoRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TxEncodeAminoRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TxEncodeAminoRequest, a, b);
    }
}
exports.TxEncodeAminoRequest = TxEncodeAminoRequest;
TxEncodeAminoRequest.runtime = protobuf_1.proto3;
TxEncodeAminoRequest.typeName = "cosmos.tx.v1beta1.TxEncodeAminoRequest";
TxEncodeAminoRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "amino_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * TxEncodeAminoResponse is the response type for the Service.TxEncodeAmino
 * RPC method.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.tx.v1beta1.TxEncodeAminoResponse
 */
class TxEncodeAminoResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes amino_binary = 1;
         */
        this.aminoBinary = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TxEncodeAminoResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TxEncodeAminoResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TxEncodeAminoResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TxEncodeAminoResponse, a, b);
    }
}
exports.TxEncodeAminoResponse = TxEncodeAminoResponse;
TxEncodeAminoResponse.runtime = protobuf_1.proto3;
TxEncodeAminoResponse.typeName = "cosmos.tx.v1beta1.TxEncodeAminoResponse";
TxEncodeAminoResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "amino_binary", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * TxDecodeAminoRequest is the request type for the Service.TxDecodeAmino
 * RPC method.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.tx.v1beta1.TxDecodeAminoRequest
 */
class TxDecodeAminoRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes amino_binary = 1;
         */
        this.aminoBinary = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TxDecodeAminoRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TxDecodeAminoRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TxDecodeAminoRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TxDecodeAminoRequest, a, b);
    }
}
exports.TxDecodeAminoRequest = TxDecodeAminoRequest;
TxDecodeAminoRequest.runtime = protobuf_1.proto3;
TxDecodeAminoRequest.typeName = "cosmos.tx.v1beta1.TxDecodeAminoRequest";
TxDecodeAminoRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "amino_binary", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * TxDecodeAminoResponse is the response type for the Service.TxDecodeAmino
 * RPC method.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.tx.v1beta1.TxDecodeAminoResponse
 */
class TxDecodeAminoResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string amino_json = 1;
         */
        this.aminoJson = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TxDecodeAminoResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TxDecodeAminoResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TxDecodeAminoResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TxDecodeAminoResponse, a, b);
    }
}
exports.TxDecodeAminoResponse = TxDecodeAminoResponse;
TxDecodeAminoResponse.runtime = protobuf_1.proto3;
TxDecodeAminoResponse.typeName = "cosmos.tx.v1beta1.TxDecodeAminoResponse";
TxDecodeAminoResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "amino_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);

"use strict";
// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/orm/query/v1alpha1/query.proto (package cosmos.orm.query.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexValue = exports.ListResponse = exports.ListRequest_Range = exports.ListRequest_Prefix = exports.ListRequest = exports.GetResponse = exports.GetRequest = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const pagination_pb_js_1 = require("../../../base/query/v1beta1/pagination_pb.js");
/**
 * GetRequest is the Query/Get request type.
 *
 * @generated from message cosmos.orm.query.v1alpha1.GetRequest
 */
class GetRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * message_name is the fully-qualified message name of the ORM table being queried.
         *
         * @generated from field: string message_name = 1;
         */
        this.messageName = "";
        /**
         * index is the index fields expression used in orm definitions. If it
         * is empty, the table's primary key is assumed. If it is non-empty, it must
         * refer to an unique index.
         *
         * @generated from field: string index = 2;
         */
        this.index = "";
        /**
         * values are the values of the fields corresponding to the requested index.
         * There must be as many values provided as there are fields in the index and
         * these values must correspond to the index field types.
         *
         * @generated from field: repeated cosmos.orm.query.v1alpha1.IndexValue values = 3;
         */
        this.values = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRequest, a, b);
    }
}
exports.GetRequest = GetRequest;
GetRequest.runtime = protobuf_1.proto3;
GetRequest.typeName = "cosmos.orm.query.v1alpha1.GetRequest";
GetRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "values", kind: "message", T: IndexValue, repeated: true },
]);
/**
 * GetResponse is the Query/Get response type.
 *
 * @generated from message cosmos.orm.query.v1alpha1.GetResponse
 */
class GetResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetResponse, a, b);
    }
}
exports.GetResponse = GetResponse;
GetResponse.runtime = protobuf_1.proto3;
GetResponse.typeName = "cosmos.orm.query.v1alpha1.GetResponse";
GetResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: protobuf_1.Any },
]);
/**
 * ListRequest is the Query/List request type.
 *
 * @generated from message cosmos.orm.query.v1alpha1.ListRequest
 */
class ListRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * message_name is the fully-qualified message name of the ORM table being queried.
         *
         * @generated from field: string message_name = 1;
         */
        this.messageName = "";
        /**
         * index is the index fields expression used in orm definitions. If it
         * is empty, the table's primary key is assumed.
         *
         * @generated from field: string index = 2;
         */
        this.index = "";
        /**
         * query is the query expression corresponding to the provided index. If
         * neither prefix nor range is specified, the query will list all the fields
         * in the index.
         *
         * @generated from oneof cosmos.orm.query.v1alpha1.ListRequest.query
         */
        this.query = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRequest, a, b);
    }
}
exports.ListRequest = ListRequest;
ListRequest.runtime = protobuf_1.proto3;
ListRequest.typeName = "cosmos.orm.query.v1alpha1.ListRequest";
ListRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "prefix", kind: "message", T: ListRequest_Prefix, oneof: "query" },
    { no: 4, name: "range", kind: "message", T: ListRequest_Range, oneof: "query" },
    { no: 5, name: "pagination", kind: "message", T: pagination_pb_js_1.PageRequest },
]);
/**
 * Prefix specifies the arguments to a prefix query.
 *
 * @generated from message cosmos.orm.query.v1alpha1.ListRequest.Prefix
 */
class ListRequest_Prefix extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * values specifies the index values for the prefix query.
         * It is valid to special a partial prefix with fewer values than
         * the number of fields in the index.
         *
         * @generated from field: repeated cosmos.orm.query.v1alpha1.IndexValue values = 1;
         */
        this.values = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRequest_Prefix().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRequest_Prefix().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRequest_Prefix().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRequest_Prefix, a, b);
    }
}
exports.ListRequest_Prefix = ListRequest_Prefix;
ListRequest_Prefix.runtime = protobuf_1.proto3;
ListRequest_Prefix.typeName = "cosmos.orm.query.v1alpha1.ListRequest.Prefix";
ListRequest_Prefix.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "message", T: IndexValue, repeated: true },
]);
/**
 * Range specifies the arguments to a range query.
 *
 * @generated from message cosmos.orm.query.v1alpha1.ListRequest.Range
 */
class ListRequest_Range extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * start specifies the starting index values for the range query.
         * It is valid to provide fewer values than the number of fields in the
         * index.
         *
         * @generated from field: repeated cosmos.orm.query.v1alpha1.IndexValue start = 1;
         */
        this.start = [];
        /**
         * end specifies the inclusive ending index values for the range query.
         * It is valid to provide fewer values than the number of fields in the
         * index.
         *
         * @generated from field: repeated cosmos.orm.query.v1alpha1.IndexValue end = 2;
         */
        this.end = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRequest_Range().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRequest_Range().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRequest_Range().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRequest_Range, a, b);
    }
}
exports.ListRequest_Range = ListRequest_Range;
ListRequest_Range.runtime = protobuf_1.proto3;
ListRequest_Range.typeName = "cosmos.orm.query.v1alpha1.ListRequest.Range";
ListRequest_Range.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: IndexValue, repeated: true },
    { no: 2, name: "end", kind: "message", T: IndexValue, repeated: true },
]);
/**
 * ListResponse is the Query/List response type.
 *
 * @generated from message cosmos.orm.query.v1alpha1.ListResponse
 */
class ListResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * results are the results of the query.
         *
         * @generated from field: repeated google.protobuf.Any results = 1;
         */
        this.results = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListResponse, a, b);
    }
}
exports.ListResponse = ListResponse;
ListResponse.runtime = protobuf_1.proto3;
ListResponse.typeName = "cosmos.orm.query.v1alpha1.ListResponse";
ListResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: protobuf_1.Any, repeated: true },
    { no: 5, name: "pagination", kind: "message", T: pagination_pb_js_1.PageResponse },
]);
/**
 * IndexValue represents the value of a field in an ORM index expression.
 *
 * @generated from message cosmos.orm.query.v1alpha1.IndexValue
 */
class IndexValue extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * value specifies the index value
         *
         * @generated from oneof cosmos.orm.query.v1alpha1.IndexValue.value
         */
        this.value = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IndexValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IndexValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IndexValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IndexValue, a, b);
    }
}
exports.IndexValue = IndexValue;
IndexValue.runtime = protobuf_1.proto3;
IndexValue.typeName = "cosmos.orm.query.v1alpha1.IndexValue";
IndexValue.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "uint", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "value" },
    { no: 2, name: "int", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 3, name: "str", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 4, name: "bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "value" },
    { no: 5, name: "enum", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 6, name: "bool", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "value" },
    { no: 7, name: "timestamp", kind: "message", T: protobuf_1.Timestamp, oneof: "value" },
    { no: 8, name: "duration", kind: "message", T: protobuf_1.Duration, oneof: "value" },
]);

"use strict";
// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/base/abci/v1beta1/abci.proto (package cosmos.base.abci.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchTxsResult = exports.TxMsgData = exports.MsgData = exports.SimulationResponse = exports.Result = exports.GasInfo = exports.Attribute = exports.StringEvent = exports.ABCIMessageLog = exports.TxResponse = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const types_pb_js_1 = require("../../../../tendermint/abci/types_pb.js");
/**
 * TxResponse defines a structure containing relevant tx data and metadata. The
 * tags are stringified and the log is JSON decoded.
 *
 * @generated from message cosmos.base.abci.v1beta1.TxResponse
 */
class TxResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The block height
         *
         * @generated from field: int64 height = 1;
         */
        this.height = protobuf_1.protoInt64.zero;
        /**
         * The transaction hash.
         *
         * @generated from field: string txhash = 2;
         */
        this.txhash = "";
        /**
         * Namespace for the Code
         *
         * @generated from field: string codespace = 3;
         */
        this.codespace = "";
        /**
         * Response code.
         *
         * @generated from field: uint32 code = 4;
         */
        this.code = 0;
        /**
         * Result bytes, if any.
         *
         * @generated from field: string data = 5;
         */
        this.data = "";
        /**
         * The output of the application's logger (raw string). May be
         * non-deterministic.
         *
         * @generated from field: string raw_log = 6;
         */
        this.rawLog = "";
        /**
         * The output of the application's logger (typed). May be non-deterministic.
         *
         * @generated from field: repeated cosmos.base.abci.v1beta1.ABCIMessageLog logs = 7;
         */
        this.logs = [];
        /**
         * Additional information. May be non-deterministic.
         *
         * @generated from field: string info = 8;
         */
        this.info = "";
        /**
         * Amount of gas requested for transaction.
         *
         * @generated from field: int64 gas_wanted = 9;
         */
        this.gasWanted = protobuf_1.protoInt64.zero;
        /**
         * Amount of gas consumed by transaction.
         *
         * @generated from field: int64 gas_used = 10;
         */
        this.gasUsed = protobuf_1.protoInt64.zero;
        /**
         * Time of the previous block. For heights > 1, it's the weighted median of
         * the timestamps of the valid votes in the block.LastCommit. For height == 1,
         * it's genesis time.
         *
         * @generated from field: string timestamp = 12;
         */
        this.timestamp = "";
        /**
         * Events defines all the events emitted by processing a transaction. Note,
         * these events include those emitted by processing all the messages and those
         * emitted from the ante. Whereas Logs contains the events, with
         * additional metadata, emitted only by processing the messages.
         *
         * Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
         *
         * @generated from field: repeated tendermint.abci.Event events = 13;
         */
        this.events = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TxResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TxResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TxResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TxResponse, a, b);
    }
}
exports.TxResponse = TxResponse;
TxResponse.runtime = protobuf_1.proto3;
TxResponse.typeName = "cosmos.base.abci.v1beta1.TxResponse";
TxResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "txhash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "codespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "raw_log", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "logs", kind: "message", T: ABCIMessageLog, repeated: true },
    { no: 8, name: "info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "gas_wanted", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "gas_used", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "tx", kind: "message", T: protobuf_1.Any },
    { no: 12, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "events", kind: "message", T: types_pb_js_1.Event, repeated: true },
]);
/**
 * ABCIMessageLog defines a structure containing an indexed tx ABCI message log.
 *
 * @generated from message cosmos.base.abci.v1beta1.ABCIMessageLog
 */
class ABCIMessageLog extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint32 msg_index = 1;
         */
        this.msgIndex = 0;
        /**
         * @generated from field: string log = 2;
         */
        this.log = "";
        /**
         * Events contains a slice of Event objects that were emitted during some
         * execution.
         *
         * @generated from field: repeated cosmos.base.abci.v1beta1.StringEvent events = 3;
         */
        this.events = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ABCIMessageLog().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ABCIMessageLog().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ABCIMessageLog().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ABCIMessageLog, a, b);
    }
}
exports.ABCIMessageLog = ABCIMessageLog;
ABCIMessageLog.runtime = protobuf_1.proto3;
ABCIMessageLog.typeName = "cosmos.base.abci.v1beta1.ABCIMessageLog";
ABCIMessageLog.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "msg_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "log", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "events", kind: "message", T: StringEvent, repeated: true },
]);
/**
 * StringEvent defines en Event object wrapper where all the attributes
 * contain key/value pairs that are strings instead of raw bytes.
 *
 * @generated from message cosmos.base.abci.v1beta1.StringEvent
 */
class StringEvent extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string type = 1;
         */
        this.type = "";
        /**
         * @generated from field: repeated cosmos.base.abci.v1beta1.Attribute attributes = 2;
         */
        this.attributes = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StringEvent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StringEvent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StringEvent().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StringEvent, a, b);
    }
}
exports.StringEvent = StringEvent;
StringEvent.runtime = protobuf_1.proto3;
StringEvent.typeName = "cosmos.base.abci.v1beta1.StringEvent";
StringEvent.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "attributes", kind: "message", T: Attribute, repeated: true },
]);
/**
 * Attribute defines an attribute wrapper where the key and value are
 * strings instead of raw bytes.
 *
 * @generated from message cosmos.base.abci.v1beta1.Attribute
 */
class Attribute extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string key = 1;
         */
        this.key = "";
        /**
         * @generated from field: string value = 2;
         */
        this.value = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Attribute().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Attribute().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Attribute().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Attribute, a, b);
    }
}
exports.Attribute = Attribute;
Attribute.runtime = protobuf_1.proto3;
Attribute.typeName = "cosmos.base.abci.v1beta1.Attribute";
Attribute.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * GasInfo defines tx execution gas context.
 *
 * @generated from message cosmos.base.abci.v1beta1.GasInfo
 */
class GasInfo extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * GasWanted is the maximum units of work we allow this tx to perform.
         *
         * @generated from field: uint64 gas_wanted = 1;
         */
        this.gasWanted = protobuf_1.protoInt64.zero;
        /**
         * GasUsed is the amount of gas actually consumed.
         *
         * @generated from field: uint64 gas_used = 2;
         */
        this.gasUsed = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GasInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GasInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GasInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GasInfo, a, b);
    }
}
exports.GasInfo = GasInfo;
GasInfo.runtime = protobuf_1.proto3;
GasInfo.typeName = "cosmos.base.abci.v1beta1.GasInfo";
GasInfo.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "gas_wanted", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "gas_used", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * Result is the union of ResponseFormat and ResponseCheckTx.
 *
 * @generated from message cosmos.base.abci.v1beta1.Result
 */
class Result extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Data is any data returned from message or handler execution. It MUST be
         * length prefixed in order to separate data from multiple message executions.
         * Deprecated. This field is still populated, but prefer msg_response instead
         * because it also contains the Msg response typeURL.
         *
         * @generated from field: bytes data = 1 [deprecated = true];
         * @deprecated
         */
        this.data = new Uint8Array(0);
        /**
         * Log contains the log information from message or handler execution.
         *
         * @generated from field: string log = 2;
         */
        this.log = "";
        /**
         * Events contains a slice of Event objects that were emitted during message
         * or handler execution.
         *
         * @generated from field: repeated tendermint.abci.Event events = 3;
         */
        this.events = [];
        /**
         * msg_responses contains the Msg handler responses type packed in Anys.
         *
         * Since: cosmos-sdk 0.46
         *
         * @generated from field: repeated google.protobuf.Any msg_responses = 4;
         */
        this.msgResponses = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Result().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Result().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Result().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Result, a, b);
    }
}
exports.Result = Result;
Result.runtime = protobuf_1.proto3;
Result.typeName = "cosmos.base.abci.v1beta1.Result";
Result.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "log", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "events", kind: "message", T: types_pb_js_1.Event, repeated: true },
    { no: 4, name: "msg_responses", kind: "message", T: protobuf_1.Any, repeated: true },
]);
/**
 * SimulationResponse defines the response generated when a transaction is
 * successfully simulated.
 *
 * @generated from message cosmos.base.abci.v1beta1.SimulationResponse
 */
class SimulationResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SimulationResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SimulationResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SimulationResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SimulationResponse, a, b);
    }
}
exports.SimulationResponse = SimulationResponse;
SimulationResponse.runtime = protobuf_1.proto3;
SimulationResponse.typeName = "cosmos.base.abci.v1beta1.SimulationResponse";
SimulationResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "gas_info", kind: "message", T: GasInfo },
    { no: 2, name: "result", kind: "message", T: Result },
]);
/**
 * MsgData defines the data returned in a Result object during message
 * execution.
 *
 * @generated from message cosmos.base.abci.v1beta1.MsgData
 * @deprecated
 */
class MsgData extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string msg_type = 1;
         */
        this.msgType = "";
        /**
         * @generated from field: bytes data = 2;
         */
        this.data = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MsgData, a, b);
    }
}
exports.MsgData = MsgData;
MsgData.runtime = protobuf_1.proto3;
MsgData.typeName = "cosmos.base.abci.v1beta1.MsgData";
MsgData.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "msg_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * TxMsgData defines a list of MsgData. A transaction will have a MsgData object
 * for each message.
 *
 * @generated from message cosmos.base.abci.v1beta1.TxMsgData
 */
class TxMsgData extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * data field is deprecated and not populated.
         *
         * @generated from field: repeated cosmos.base.abci.v1beta1.MsgData data = 1 [deprecated = true];
         * @deprecated
         */
        this.data = [];
        /**
         * msg_responses contains the Msg handler responses packed into Anys.
         *
         * Since: cosmos-sdk 0.46
         *
         * @generated from field: repeated google.protobuf.Any msg_responses = 2;
         */
        this.msgResponses = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TxMsgData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TxMsgData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TxMsgData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TxMsgData, a, b);
    }
}
exports.TxMsgData = TxMsgData;
TxMsgData.runtime = protobuf_1.proto3;
TxMsgData.typeName = "cosmos.base.abci.v1beta1.TxMsgData";
TxMsgData.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: MsgData, repeated: true },
    { no: 2, name: "msg_responses", kind: "message", T: protobuf_1.Any, repeated: true },
]);
/**
 * SearchTxsResult defines a structure for querying txs pageable
 *
 * @generated from message cosmos.base.abci.v1beta1.SearchTxsResult
 */
class SearchTxsResult extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Count of all txs
         *
         * @generated from field: uint64 total_count = 1;
         */
        this.totalCount = protobuf_1.protoInt64.zero;
        /**
         * Count of txs in current page
         *
         * @generated from field: uint64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * Index of current page, start from 1
         *
         * @generated from field: uint64 page_number = 3;
         */
        this.pageNumber = protobuf_1.protoInt64.zero;
        /**
         * Count of total pages
         *
         * @generated from field: uint64 page_total = 4;
         */
        this.pageTotal = protobuf_1.protoInt64.zero;
        /**
         * Max count txs per page
         *
         * @generated from field: uint64 limit = 5;
         */
        this.limit = protobuf_1.protoInt64.zero;
        /**
         * List of txs in current page
         *
         * @generated from field: repeated cosmos.base.abci.v1beta1.TxResponse txs = 6;
         */
        this.txs = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchTxsResult().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchTxsResult().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchTxsResult().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchTxsResult, a, b);
    }
}
exports.SearchTxsResult = SearchTxsResult;
SearchTxsResult.runtime = protobuf_1.proto3;
SearchTxsResult.typeName = "cosmos.base.abci.v1beta1.SearchTxsResult";
SearchTxsResult.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "total_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "page_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "page_total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "txs", kind: "message", T: TxResponse, repeated: true },
]);

"use strict";
// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/base/node/v1beta1/query.proto (package cosmos.base.node.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigResponse = exports.ConfigRequest = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * ConfigRequest defines the request structure for the Config gRPC query.
 *
 * @generated from message cosmos.base.node.v1beta1.ConfigRequest
 */
class ConfigRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConfigRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConfigRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConfigRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ConfigRequest, a, b);
    }
}
exports.ConfigRequest = ConfigRequest;
ConfigRequest.runtime = protobuf_1.proto3;
ConfigRequest.typeName = "cosmos.base.node.v1beta1.ConfigRequest";
ConfigRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * ConfigResponse defines the response structure for the Config gRPC query.
 *
 * @generated from message cosmos.base.node.v1beta1.ConfigResponse
 */
class ConfigResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string minimum_gas_price = 1;
         */
        this.minimumGasPrice = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConfigResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConfigResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConfigResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ConfigResponse, a, b);
    }
}
exports.ConfigResponse = ConfigResponse;
ConfigResponse.runtime = protobuf_1.proto3;
ConfigResponse.typeName = "cosmos.base.node.v1beta1.ConfigResponse";
ConfigResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "minimum_gas_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);

"use strict";
// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/staking/v1beta1/authz.proto (package cosmos.staking.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakeAuthorization_Validators = exports.StakeAuthorization = exports.AuthorizationType = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const coin_pb_js_1 = require("../../base/v1beta1/coin_pb.js");
/**
 * AuthorizationType defines the type of staking module authorization type
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from enum cosmos.staking.v1beta1.AuthorizationType
 */
var AuthorizationType;
(function (AuthorizationType) {
    /**
     * AUTHORIZATION_TYPE_UNSPECIFIED specifies an unknown authorization type
     *
     * @generated from enum value: AUTHORIZATION_TYPE_UNSPECIFIED = 0;
     */
    AuthorizationType[AuthorizationType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * AUTHORIZATION_TYPE_DELEGATE defines an authorization type for Msg/Delegate
     *
     * @generated from enum value: AUTHORIZATION_TYPE_DELEGATE = 1;
     */
    AuthorizationType[AuthorizationType["DELEGATE"] = 1] = "DELEGATE";
    /**
     * AUTHORIZATION_TYPE_UNDELEGATE defines an authorization type for Msg/Undelegate
     *
     * @generated from enum value: AUTHORIZATION_TYPE_UNDELEGATE = 2;
     */
    AuthorizationType[AuthorizationType["UNDELEGATE"] = 2] = "UNDELEGATE";
    /**
     * AUTHORIZATION_TYPE_REDELEGATE defines an authorization type for Msg/BeginRedelegate
     *
     * @generated from enum value: AUTHORIZATION_TYPE_REDELEGATE = 3;
     */
    AuthorizationType[AuthorizationType["REDELEGATE"] = 3] = "REDELEGATE";
})(AuthorizationType || (exports.AuthorizationType = AuthorizationType = {}));
// Retrieve enum metadata with: proto3.getEnumType(AuthorizationType)
protobuf_1.proto3.util.setEnumType(AuthorizationType, "cosmos.staking.v1beta1.AuthorizationType", [
    { no: 0, name: "AUTHORIZATION_TYPE_UNSPECIFIED" },
    { no: 1, name: "AUTHORIZATION_TYPE_DELEGATE" },
    { no: 2, name: "AUTHORIZATION_TYPE_UNDELEGATE" },
    { no: 3, name: "AUTHORIZATION_TYPE_REDELEGATE" },
]);
/**
 * StakeAuthorization defines authorization for delegate/undelegate/redelegate.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from message cosmos.staking.v1beta1.StakeAuthorization
 */
class StakeAuthorization extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * validators is the oneof that represents either allow_list or deny_list
         *
         * @generated from oneof cosmos.staking.v1beta1.StakeAuthorization.validators
         */
        this.validators = { case: undefined };
        /**
         * authorization_type defines one of AuthorizationType.
         *
         * @generated from field: cosmos.staking.v1beta1.AuthorizationType authorization_type = 4;
         */
        this.authorizationType = AuthorizationType.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StakeAuthorization().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StakeAuthorization().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StakeAuthorization().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StakeAuthorization, a, b);
    }
}
exports.StakeAuthorization = StakeAuthorization;
StakeAuthorization.runtime = protobuf_1.proto3;
StakeAuthorization.typeName = "cosmos.staking.v1beta1.StakeAuthorization";
StakeAuthorization.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "max_tokens", kind: "message", T: coin_pb_js_1.Coin },
    { no: 2, name: "allow_list", kind: "message", T: StakeAuthorization_Validators, oneof: "validators" },
    { no: 3, name: "deny_list", kind: "message", T: StakeAuthorization_Validators, oneof: "validators" },
    { no: 4, name: "authorization_type", kind: "enum", T: protobuf_1.proto3.getEnumType(AuthorizationType) },
]);
/**
 * Validators defines list of validator addresses.
 *
 * @generated from message cosmos.staking.v1beta1.StakeAuthorization.Validators
 */
class StakeAuthorization_Validators extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string address = 1;
         */
        this.address = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StakeAuthorization_Validators().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StakeAuthorization_Validators().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StakeAuthorization_Validators().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StakeAuthorization_Validators, a, b);
    }
}
exports.StakeAuthorization_Validators = StakeAuthorization_Validators;
StakeAuthorization_Validators.runtime = protobuf_1.proto3;
StakeAuthorization_Validators.typeName = "cosmos.staking.v1beta1.StakeAuthorization.Validators";
StakeAuthorization_Validators.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);

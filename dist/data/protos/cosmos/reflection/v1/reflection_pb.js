"use strict";
// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/reflection/v1/reflection.proto (package cosmos.reflection.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileDescriptorsResponse = exports.FileDescriptorsRequest = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * FileDescriptorsRequest is the Query/FileDescriptors request type.
 *
 * @generated from message cosmos.reflection.v1.FileDescriptorsRequest
 */
class FileDescriptorsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FileDescriptorsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FileDescriptorsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FileDescriptorsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FileDescriptorsRequest, a, b);
    }
}
exports.FileDescriptorsRequest = FileDescriptorsRequest;
FileDescriptorsRequest.runtime = protobuf_1.proto3;
FileDescriptorsRequest.typeName = "cosmos.reflection.v1.FileDescriptorsRequest";
FileDescriptorsRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * FileDescriptorsResponse is the Query/FileDescriptors response type.
 *
 * @generated from message cosmos.reflection.v1.FileDescriptorsResponse
 */
class FileDescriptorsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * files is the file descriptors.
         *
         * @generated from field: repeated google.protobuf.FileDescriptorProto files = 1;
         */
        this.files = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FileDescriptorsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FileDescriptorsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FileDescriptorsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FileDescriptorsResponse, a, b);
    }
}
exports.FileDescriptorsResponse = FileDescriptorsResponse;
FileDescriptorsResponse.runtime = protobuf_1.proto3;
FileDescriptorsResponse.typeName = "cosmos.reflection.v1.FileDescriptorsResponse";
FileDescriptorsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "files", kind: "message", T: protobuf_1.FileDescriptorProto, repeated: true },
]);

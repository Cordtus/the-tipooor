"use strict";
// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/bank/v1beta1/authz.proto (package cosmos.bank.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendAuthorization = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const coin_pb_js_1 = require("../../base/v1beta1/coin_pb.js");
/**
 * SendAuthorization allows the grantee to spend up to spend_limit coins from
 * the granter's account.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from message cosmos.bank.v1beta1.SendAuthorization
 */
class SendAuthorization extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin spend_limit = 1;
         */
        this.spendLimit = [];
        /**
         * allow_list specifies an optional list of addresses to whom the grantee can send tokens on behalf of the
         * granter. If omitted, any recipient is allowed.
         *
         * Since: cosmos-sdk 0.47
         *
         * @generated from field: repeated string allow_list = 2;
         */
        this.allowList = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SendAuthorization().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SendAuthorization().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SendAuthorization().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SendAuthorization, a, b);
    }
}
exports.SendAuthorization = SendAuthorization;
SendAuthorization.runtime = protobuf_1.proto3;
SendAuthorization.typeName = "cosmos.bank.v1beta1.SendAuthorization";
SendAuthorization.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "spend_limit", kind: "message", T: coin_pb_js_1.Coin, repeated: true },
    { no: 2, name: "allow_list", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);

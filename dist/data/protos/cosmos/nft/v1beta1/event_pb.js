"use strict";
// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/nft/v1beta1/event.proto (package cosmos.nft.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventBurn = exports.EventMint = exports.EventSend = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * EventSend is emitted on Msg/Send
 *
 * @generated from message cosmos.nft.v1beta1.EventSend
 */
class EventSend extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * class_id associated with the nft
         *
         * @generated from field: string class_id = 1;
         */
        this.classId = "";
        /**
         * id is a unique identifier of the nft
         *
         * @generated from field: string id = 2;
         */
        this.id = "";
        /**
         * sender is the address of the owner of nft
         *
         * @generated from field: string sender = 3;
         */
        this.sender = "";
        /**
         * receiver is the receiver address of nft
         *
         * @generated from field: string receiver = 4;
         */
        this.receiver = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventSend().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventSend().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventSend().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EventSend, a, b);
    }
}
exports.EventSend = EventSend;
EventSend.runtime = protobuf_1.proto3;
EventSend.typeName = "cosmos.nft.v1beta1.EventSend";
EventSend.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * EventMint is emitted on Mint
 *
 * @generated from message cosmos.nft.v1beta1.EventMint
 */
class EventMint extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * class_id associated with the nft
         *
         * @generated from field: string class_id = 1;
         */
        this.classId = "";
        /**
         * id is a unique identifier of the nft
         *
         * @generated from field: string id = 2;
         */
        this.id = "";
        /**
         * owner is the owner address of the nft
         *
         * @generated from field: string owner = 3;
         */
        this.owner = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventMint().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventMint().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventMint().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EventMint, a, b);
    }
}
exports.EventMint = EventMint;
EventMint.runtime = protobuf_1.proto3;
EventMint.typeName = "cosmos.nft.v1beta1.EventMint";
EventMint.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * EventBurn is emitted on Burn
 *
 * @generated from message cosmos.nft.v1beta1.EventBurn
 */
class EventBurn extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * class_id associated with the nft
         *
         * @generated from field: string class_id = 1;
         */
        this.classId = "";
        /**
         * id is a unique identifier of the nft
         *
         * @generated from field: string id = 2;
         */
        this.id = "";
        /**
         * owner is the owner address of the nft
         *
         * @generated from field: string owner = 3;
         */
        this.owner = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventBurn().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventBurn().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventBurn().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EventBurn, a, b);
    }
}
exports.EventBurn = EventBurn;
EventBurn.runtime = protobuf_1.proto3;
EventBurn.typeName = "cosmos.nft.v1beta1.EventBurn";
EventBurn.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);

"use strict";
// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/nft/v1beta1/query.proto (package cosmos.nft.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClassesResponse = exports.QueryClassesRequest = exports.QueryClassResponse = exports.QueryClassRequest = exports.QueryNFTResponse = exports.QueryNFTRequest = exports.QueryNFTsResponse = exports.QueryNFTsRequest = exports.QuerySupplyResponse = exports.QuerySupplyRequest = exports.QueryOwnerResponse = exports.QueryOwnerRequest = exports.QueryBalanceResponse = exports.QueryBalanceRequest = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const pagination_pb_js_1 = require("../../base/query/v1beta1/pagination_pb.js");
const nft_pb_js_1 = require("./nft_pb.js");
/**
 * QueryBalanceRequest is the request type for the Query/Balance RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryBalanceRequest
 */
class QueryBalanceRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * class_id associated with the nft
         *
         * @generated from field: string class_id = 1;
         */
        this.classId = "";
        /**
         * owner is the owner address of the nft
         *
         * @generated from field: string owner = 2;
         */
        this.owner = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBalanceRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBalanceRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBalanceRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryBalanceRequest, a, b);
    }
}
exports.QueryBalanceRequest = QueryBalanceRequest;
QueryBalanceRequest.runtime = protobuf_1.proto3;
QueryBalanceRequest.typeName = "cosmos.nft.v1beta1.QueryBalanceRequest";
QueryBalanceRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryBalanceResponse is the response type for the Query/Balance RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryBalanceResponse
 */
class QueryBalanceResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * amount is the number of all NFTs of a given class owned by the owner
         *
         * @generated from field: uint64 amount = 1;
         */
        this.amount = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBalanceResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBalanceResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBalanceResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryBalanceResponse, a, b);
    }
}
exports.QueryBalanceResponse = QueryBalanceResponse;
QueryBalanceResponse.runtime = protobuf_1.proto3;
QueryBalanceResponse.typeName = "cosmos.nft.v1beta1.QueryBalanceResponse";
QueryBalanceResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * QueryOwnerRequest is the request type for the Query/Owner RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryOwnerRequest
 */
class QueryOwnerRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * class_id associated with the nft
         *
         * @generated from field: string class_id = 1;
         */
        this.classId = "";
        /**
         * id is a unique identifier of the NFT
         *
         * @generated from field: string id = 2;
         */
        this.id = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryOwnerRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryOwnerRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryOwnerRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryOwnerRequest, a, b);
    }
}
exports.QueryOwnerRequest = QueryOwnerRequest;
QueryOwnerRequest.runtime = protobuf_1.proto3;
QueryOwnerRequest.typeName = "cosmos.nft.v1beta1.QueryOwnerRequest";
QueryOwnerRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryOwnerResponse is the response type for the Query/Owner RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryOwnerResponse
 */
class QueryOwnerResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * owner is the owner address of the nft
         *
         * @generated from field: string owner = 1;
         */
        this.owner = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryOwnerResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryOwnerResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryOwnerResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryOwnerResponse, a, b);
    }
}
exports.QueryOwnerResponse = QueryOwnerResponse;
QueryOwnerResponse.runtime = protobuf_1.proto3;
QueryOwnerResponse.typeName = "cosmos.nft.v1beta1.QueryOwnerResponse";
QueryOwnerResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QuerySupplyRequest is the request type for the Query/Supply RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QuerySupplyRequest
 */
class QuerySupplyRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * class_id associated with the nft
         *
         * @generated from field: string class_id = 1;
         */
        this.classId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QuerySupplyRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QuerySupplyRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QuerySupplyRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QuerySupplyRequest, a, b);
    }
}
exports.QuerySupplyRequest = QuerySupplyRequest;
QuerySupplyRequest.runtime = protobuf_1.proto3;
QuerySupplyRequest.typeName = "cosmos.nft.v1beta1.QuerySupplyRequest";
QuerySupplyRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QuerySupplyResponse is the response type for the Query/Supply RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QuerySupplyResponse
 */
class QuerySupplyResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * amount is the number of all NFTs from the given class
         *
         * @generated from field: uint64 amount = 1;
         */
        this.amount = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QuerySupplyResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QuerySupplyResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QuerySupplyResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QuerySupplyResponse, a, b);
    }
}
exports.QuerySupplyResponse = QuerySupplyResponse;
QuerySupplyResponse.runtime = protobuf_1.proto3;
QuerySupplyResponse.typeName = "cosmos.nft.v1beta1.QuerySupplyResponse";
QuerySupplyResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * QueryNFTstRequest is the request type for the Query/NFTs RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryNFTsRequest
 */
class QueryNFTsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * class_id associated with the nft
         *
         * @generated from field: string class_id = 1;
         */
        this.classId = "";
        /**
         * owner is the owner address of the nft
         *
         * @generated from field: string owner = 2;
         */
        this.owner = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryNFTsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryNFTsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryNFTsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryNFTsRequest, a, b);
    }
}
exports.QueryNFTsRequest = QueryNFTsRequest;
QueryNFTsRequest.runtime = protobuf_1.proto3;
QueryNFTsRequest.typeName = "cosmos.nft.v1beta1.QueryNFTsRequest";
QueryNFTsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: pagination_pb_js_1.PageRequest },
]);
/**
 * QueryNFTsResponse is the response type for the Query/NFTs RPC methods
 *
 * @generated from message cosmos.nft.v1beta1.QueryNFTsResponse
 */
class QueryNFTsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * NFT defines the NFT
         *
         * @generated from field: repeated cosmos.nft.v1beta1.NFT nfts = 1;
         */
        this.nfts = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryNFTsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryNFTsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryNFTsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryNFTsResponse, a, b);
    }
}
exports.QueryNFTsResponse = QueryNFTsResponse;
QueryNFTsResponse.runtime = protobuf_1.proto3;
QueryNFTsResponse.typeName = "cosmos.nft.v1beta1.QueryNFTsResponse";
QueryNFTsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "nfts", kind: "message", T: nft_pb_js_1.NFT, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: pagination_pb_js_1.PageResponse },
]);
/**
 * QueryNFTRequest is the request type for the Query/NFT RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryNFTRequest
 */
class QueryNFTRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * class_id associated with the nft
         *
         * @generated from field: string class_id = 1;
         */
        this.classId = "";
        /**
         * id is a unique identifier of the NFT
         *
         * @generated from field: string id = 2;
         */
        this.id = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryNFTRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryNFTRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryNFTRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryNFTRequest, a, b);
    }
}
exports.QueryNFTRequest = QueryNFTRequest;
QueryNFTRequest.runtime = protobuf_1.proto3;
QueryNFTRequest.typeName = "cosmos.nft.v1beta1.QueryNFTRequest";
QueryNFTRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryNFTResponse is the response type for the Query/NFT RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryNFTResponse
 */
class QueryNFTResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryNFTResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryNFTResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryNFTResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryNFTResponse, a, b);
    }
}
exports.QueryNFTResponse = QueryNFTResponse;
QueryNFTResponse.runtime = protobuf_1.proto3;
QueryNFTResponse.typeName = "cosmos.nft.v1beta1.QueryNFTResponse";
QueryNFTResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "nft", kind: "message", T: nft_pb_js_1.NFT },
]);
/**
 * QueryClassRequest is the request type for the Query/Class RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryClassRequest
 */
class QueryClassRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * class_id associated with the nft
         *
         * @generated from field: string class_id = 1;
         */
        this.classId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryClassRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryClassRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryClassRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryClassRequest, a, b);
    }
}
exports.QueryClassRequest = QueryClassRequest;
QueryClassRequest.runtime = protobuf_1.proto3;
QueryClassRequest.typeName = "cosmos.nft.v1beta1.QueryClassRequest";
QueryClassRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryClassResponse is the response type for the Query/Class RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryClassResponse
 */
class QueryClassResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryClassResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryClassResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryClassResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryClassResponse, a, b);
    }
}
exports.QueryClassResponse = QueryClassResponse;
QueryClassResponse.runtime = protobuf_1.proto3;
QueryClassResponse.typeName = "cosmos.nft.v1beta1.QueryClassResponse";
QueryClassResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "class", kind: "message", T: nft_pb_js_1.Class },
]);
/**
 * QueryClassesRequest is the request type for the Query/Classes RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryClassesRequest
 */
class QueryClassesRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryClassesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryClassesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryClassesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryClassesRequest, a, b);
    }
}
exports.QueryClassesRequest = QueryClassesRequest;
QueryClassesRequest.runtime = protobuf_1.proto3;
QueryClassesRequest.typeName = "cosmos.nft.v1beta1.QueryClassesRequest";
QueryClassesRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: pagination_pb_js_1.PageRequest },
]);
/**
 * QueryClassesResponse is the response type for the Query/Classes RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryClassesResponse
 */
class QueryClassesResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * class defines the class of the nft type.
         *
         * @generated from field: repeated cosmos.nft.v1beta1.Class classes = 1;
         */
        this.classes = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryClassesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryClassesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryClassesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryClassesResponse, a, b);
    }
}
exports.QueryClassesResponse = QueryClassesResponse;
QueryClassesResponse.runtime = protobuf_1.proto3;
QueryClassesResponse.typeName = "cosmos.nft.v1beta1.QueryClassesResponse";
QueryClassesResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "classes", kind: "message", T: nft_pb_js_1.Class, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: pagination_pb_js_1.PageResponse },
]);

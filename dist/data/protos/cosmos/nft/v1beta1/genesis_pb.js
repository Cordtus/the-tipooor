"use strict";
// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/nft/v1beta1/genesis.proto (package cosmos.nft.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.Entry = exports.GenesisState = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const nft_pb_js_1 = require("./nft_pb.js");
/**
 * GenesisState defines the nft module's genesis state.
 *
 * @generated from message cosmos.nft.v1beta1.GenesisState
 */
class GenesisState extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * class defines the class of the nft type.
         *
         * @generated from field: repeated cosmos.nft.v1beta1.Class classes = 1;
         */
        this.classes = [];
        /**
         * entry defines all nft owned by a person.
         *
         * @generated from field: repeated cosmos.nft.v1beta1.Entry entries = 2;
         */
        this.entries = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenesisState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenesisState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenesisState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GenesisState, a, b);
    }
}
exports.GenesisState = GenesisState;
GenesisState.runtime = protobuf_1.proto3;
GenesisState.typeName = "cosmos.nft.v1beta1.GenesisState";
GenesisState.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "classes", kind: "message", T: nft_pb_js_1.Class, repeated: true },
    { no: 2, name: "entries", kind: "message", T: Entry, repeated: true },
]);
/**
 * Entry Defines all nft owned by a person
 *
 * @generated from message cosmos.nft.v1beta1.Entry
 */
class Entry extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * owner is the owner address of the following nft
         *
         * @generated from field: string owner = 1;
         */
        this.owner = "";
        /**
         * nfts is a group of nfts of the same owner
         *
         * @generated from field: repeated cosmos.nft.v1beta1.NFT nfts = 2;
         */
        this.nfts = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Entry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Entry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Entry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Entry, a, b);
    }
}
exports.Entry = Entry;
Entry.runtime = protobuf_1.proto3;
Entry.typeName = "cosmos.nft.v1beta1.Entry";
Entry.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nfts", kind: "message", T: nft_pb_js_1.NFT, repeated: true },
]);

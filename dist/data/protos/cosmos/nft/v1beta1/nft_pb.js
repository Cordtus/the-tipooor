"use strict";
// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/nft/v1beta1/nft.proto (package cosmos.nft.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.NFT = exports.Class = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * Class defines the class of the nft type.
 *
 * @generated from message cosmos.nft.v1beta1.Class
 */
class Class extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * id defines the unique identifier of the NFT classification, similar to the contract address of ERC721
         *
         * @generated from field: string id = 1;
         */
        this.id = "";
        /**
         * name defines the human-readable name of the NFT classification. Optional
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * symbol is an abbreviated name for nft classification. Optional
         *
         * @generated from field: string symbol = 3;
         */
        this.symbol = "";
        /**
         * description is a brief description of nft classification. Optional
         *
         * @generated from field: string description = 4;
         */
        this.description = "";
        /**
         * uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional
         *
         * @generated from field: string uri = 5;
         */
        this.uri = "";
        /**
         * uri_hash is a hash of the document pointed by uri. Optional
         *
         * @generated from field: string uri_hash = 6;
         */
        this.uriHash = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Class().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Class().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Class().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Class, a, b);
    }
}
exports.Class = Class;
Class.runtime = protobuf_1.proto3;
Class.typeName = "cosmos.nft.v1beta1.Class";
Class.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "uri_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "data", kind: "message", T: protobuf_1.Any },
]);
/**
 * NFT defines the NFT.
 *
 * @generated from message cosmos.nft.v1beta1.NFT
 */
class NFT extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * class_id associated with the NFT, similar to the contract address of ERC721
         *
         * @generated from field: string class_id = 1;
         */
        this.classId = "";
        /**
         * id is a unique identifier of the NFT
         *
         * @generated from field: string id = 2;
         */
        this.id = "";
        /**
         * uri for the NFT metadata stored off chain
         *
         * @generated from field: string uri = 3;
         */
        this.uri = "";
        /**
         * uri_hash is a hash of the document pointed by uri
         *
         * @generated from field: string uri_hash = 4;
         */
        this.uriHash = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NFT().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NFT().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NFT().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(NFT, a, b);
    }
}
exports.NFT = NFT;
NFT.runtime = protobuf_1.proto3;
NFT.typeName = "cosmos.nft.v1beta1.NFT";
NFT.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "class_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "uri_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "data", kind: "message", T: protobuf_1.Any },
]);

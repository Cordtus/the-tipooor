"use strict";
// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/capability/v1beta1/capability.proto (package cosmos.capability.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.CapabilityOwners = exports.Owner = exports.Capability = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * Capability defines an implementation of an object capability. The index
 * provided to a Capability must be globally unique.
 *
 * @generated from message cosmos.capability.v1beta1.Capability
 */
class Capability extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 index = 1;
         */
        this.index = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Capability().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Capability().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Capability().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Capability, a, b);
    }
}
exports.Capability = Capability;
Capability.runtime = protobuf_1.proto3;
Capability.typeName = "cosmos.capability.v1beta1.Capability";
Capability.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * Owner defines a single capability owner. An owner is defined by the name of
 * capability and the module name.
 *
 * @generated from message cosmos.capability.v1beta1.Owner
 */
class Owner extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string module = 1;
         */
        this.module = "";
        /**
         * @generated from field: string name = 2;
         */
        this.name = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Owner().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Owner().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Owner().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Owner, a, b);
    }
}
exports.Owner = Owner;
Owner.runtime = protobuf_1.proto3;
Owner.typeName = "cosmos.capability.v1beta1.Owner";
Owner.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * CapabilityOwners defines a set of owners of a single Capability. The set of
 * owners must be unique.
 *
 * @generated from message cosmos.capability.v1beta1.CapabilityOwners
 */
class CapabilityOwners extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.capability.v1beta1.Owner owners = 1;
         */
        this.owners = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CapabilityOwners().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CapabilityOwners().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CapabilityOwners().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CapabilityOwners, a, b);
    }
}
exports.CapabilityOwners = CapabilityOwners;
CapabilityOwners.runtime = protobuf_1.proto3;
CapabilityOwners.typeName = "cosmos.capability.v1beta1.CapabilityOwners";
CapabilityOwners.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "owners", kind: "message", T: Owner, repeated: true },
]);

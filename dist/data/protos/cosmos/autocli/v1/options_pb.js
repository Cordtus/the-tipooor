"use strict";
// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/autocli/v1/options.proto (package cosmos.autocli.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.PositionalArgDescriptor = exports.FlagOptions = exports.RpcCommandOptions = exports.ServiceCommandDescriptor = exports.ModuleOptions = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * ModuleOptions describes the CLI options for a Cosmos SDK module.
 *
 * @generated from message cosmos.autocli.v1.ModuleOptions
 */
class ModuleOptions extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ModuleOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ModuleOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ModuleOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ModuleOptions, a, b);
    }
}
exports.ModuleOptions = ModuleOptions;
ModuleOptions.runtime = protobuf_1.proto3;
ModuleOptions.typeName = "cosmos.autocli.v1.ModuleOptions";
ModuleOptions.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "tx", kind: "message", T: ServiceCommandDescriptor },
    { no: 2, name: "query", kind: "message", T: ServiceCommandDescriptor },
]);
/**
 * ServiceCommandDescriptor describes a CLI command based on a protobuf service.
 *
 * @generated from message cosmos.autocli.v1.ServiceCommandDescriptor
 */
class ServiceCommandDescriptor extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * service is the fully qualified name of the protobuf service to build
         * the command from. It can be left empty if sub_commands are used instead
         * which may be the case if a module provides multiple tx and/or query services.
         *
         * @generated from field: string service = 1;
         */
        this.service = "";
        /**
         * rpc_command_options are options for commands generated from rpc methods.
         * If no options are specified for a given rpc method on the service, a
         * command will be generated for that method with the default options.
         *
         * @generated from field: repeated cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2;
         */
        this.rpcCommandOptions = [];
        /**
         * sub_commands is a map of optional sub-commands for this command based on
         * different protobuf services. The map key is used as the name of the
         * sub-command.
         *
         * @generated from field: map<string, cosmos.autocli.v1.ServiceCommandDescriptor> sub_commands = 3;
         */
        this.subCommands = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ServiceCommandDescriptor().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ServiceCommandDescriptor().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ServiceCommandDescriptor().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ServiceCommandDescriptor, a, b);
    }
}
exports.ServiceCommandDescriptor = ServiceCommandDescriptor;
ServiceCommandDescriptor.runtime = protobuf_1.proto3;
ServiceCommandDescriptor.typeName = "cosmos.autocli.v1.ServiceCommandDescriptor";
ServiceCommandDescriptor.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rpc_command_options", kind: "message", T: RpcCommandOptions, repeated: true },
    { no: 3, name: "sub_commands", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: ServiceCommandDescriptor } },
]);
/**
 * RpcCommandOptions specifies options for commands generated from protobuf
 * rpc methods.
 *
 * @generated from message cosmos.autocli.v1.RpcCommandOptions
 */
class RpcCommandOptions extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * rpc_method is short name of the protobuf rpc method that this command is
         * generated from.
         *
         * @generated from field: string rpc_method = 1;
         */
        this.rpcMethod = "";
        /**
         * use is the one-line usage method. It also allows specifying an alternate
         * name for the command as the first word of the usage text.
         *
         * By default the name of an rpc command is the kebab-case short name of the
         * rpc method.
         *
         * @generated from field: string use = 2;
         */
        this.use = "";
        /**
         * long is the long message shown in the 'help <this-command>' output.
         *
         * @generated from field: string long = 3;
         */
        this.long = "";
        /**
         * short is the short description shown in the 'help' output.
         *
         * @generated from field: string short = 4;
         */
        this.short = "";
        /**
         * example is examples of how to use the command.
         *
         * @generated from field: string example = 5;
         */
        this.example = "";
        /**
         * alias is an array of aliases that can be used instead of the first word in Use.
         *
         * @generated from field: repeated string alias = 6;
         */
        this.alias = [];
        /**
         * suggest_for is an array of command names for which this command will be suggested -
         * similar to aliases but only suggests.
         *
         * @generated from field: repeated string suggest_for = 7;
         */
        this.suggestFor = [];
        /**
         * deprecated defines, if this command is deprecated and should print this string when used.
         *
         * @generated from field: string deprecated = 8;
         */
        this.deprecated = "";
        /**
         * version defines the version for this command. If this value is non-empty and the command does not
         * define a "version" flag, a "version" boolean flag will be added to the command and, if specified,
         * will print content of the "Version" variable. A shorthand "v" flag will also be added if the
         * command does not define one.
         *
         * @generated from field: string version = 9;
         */
        this.version = "";
        /**
         * flag_options are options for flags generated from rpc request fields.
         * By default all request fields are configured as flags. They can
         * also be configured as positional args instead using positional_args.
         *
         * @generated from field: map<string, cosmos.autocli.v1.FlagOptions> flag_options = 10;
         */
        this.flagOptions = {};
        /**
         * positional_args specifies positional arguments for the command.
         *
         * @generated from field: repeated cosmos.autocli.v1.PositionalArgDescriptor positional_args = 11;
         */
        this.positionalArgs = [];
        /**
         * skip specifies whether to skip this rpc method when generating commands.
         *
         * @generated from field: bool skip = 12;
         */
        this.skip = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RpcCommandOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RpcCommandOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RpcCommandOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RpcCommandOptions, a, b);
    }
}
exports.RpcCommandOptions = RpcCommandOptions;
RpcCommandOptions.runtime = protobuf_1.proto3;
RpcCommandOptions.typeName = "cosmos.autocli.v1.RpcCommandOptions";
RpcCommandOptions.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "rpc_method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "use", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "long", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "short", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "example", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "alias", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "suggest_for", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "deprecated", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "flag_options", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: FlagOptions } },
    { no: 11, name: "positional_args", kind: "message", T: PositionalArgDescriptor, repeated: true },
    { no: 12, name: "skip", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * FlagOptions are options for flags generated from rpc request fields.
 * By default, all request fields are configured as flags based on the
 * kebab-case name of the field. Fields can be turned into positional arguments
 * instead by using RpcCommandOptions.positional_args.
 *
 * @generated from message cosmos.autocli.v1.FlagOptions
 */
class FlagOptions extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * name is an alternate name to use for the field flag.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * shorthand is a one-letter abbreviated flag.
         *
         * @generated from field: string shorthand = 2;
         */
        this.shorthand = "";
        /**
         * usage is the help message.
         *
         * @generated from field: string usage = 3;
         */
        this.usage = "";
        /**
         * default_value is the default value as text.
         *
         * @generated from field: string default_value = 4;
         */
        this.defaultValue = "";
        /**
         * default value is the default value as text if the flag is used without any value.
         *
         * @generated from field: string no_opt_default_value = 5;
         */
        this.noOptDefaultValue = "";
        /**
         * deprecated is the usage text to show if this flag is deprecated.
         *
         * @generated from field: string deprecated = 6;
         */
        this.deprecated = "";
        /**
         * shorthand_deprecated is the usage text to show if the shorthand of this flag is deprecated.
         *
         * @generated from field: string shorthand_deprecated = 7;
         */
        this.shorthandDeprecated = "";
        /**
         * hidden hides the flag from help/usage text
         *
         * @generated from field: bool hidden = 8;
         */
        this.hidden = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FlagOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FlagOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FlagOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FlagOptions, a, b);
    }
}
exports.FlagOptions = FlagOptions;
FlagOptions.runtime = protobuf_1.proto3;
FlagOptions.typeName = "cosmos.autocli.v1.FlagOptions";
FlagOptions.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "shorthand", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "usage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "default_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "no_opt_default_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "deprecated", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "shorthand_deprecated", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * PositionalArgDescriptor describes a positional argument.
 *
 * @generated from message cosmos.autocli.v1.PositionalArgDescriptor
 */
class PositionalArgDescriptor extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * proto_field specifies the proto field to use as the positional arg. Any
         * fields used as positional args will not have a flag generated.
         *
         * @generated from field: string proto_field = 1;
         */
        this.protoField = "";
        /**
         * varargs makes a positional parameter a varargs parameter. This can only be
         * applied to last positional parameter and the proto_field must a repeated
         * field.
         *
         * @generated from field: bool varargs = 2;
         */
        this.varargs = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PositionalArgDescriptor().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PositionalArgDescriptor().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PositionalArgDescriptor().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PositionalArgDescriptor, a, b);
    }
}
exports.PositionalArgDescriptor = PositionalArgDescriptor;
PositionalArgDescriptor.runtime = protobuf_1.proto3;
PositionalArgDescriptor.typeName = "cosmos.autocli.v1.PositionalArgDescriptor";
PositionalArgDescriptor.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "proto_field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "varargs", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);

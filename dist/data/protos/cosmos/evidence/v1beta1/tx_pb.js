"use strict";
// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/evidence/v1beta1/tx.proto (package cosmos.evidence.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgSubmitEvidenceResponse = exports.MsgSubmitEvidence = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * MsgSubmitEvidence represents a message that supports submitting arbitrary
 * Evidence of misbehavior such as equivocation or counterfactual signing.
 *
 * @generated from message cosmos.evidence.v1beta1.MsgSubmitEvidence
 */
class MsgSubmitEvidence extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * submitter is the signer account address of evidence.
         *
         * @generated from field: string submitter = 1;
         */
        this.submitter = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSubmitEvidence().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSubmitEvidence().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSubmitEvidence().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MsgSubmitEvidence, a, b);
    }
}
exports.MsgSubmitEvidence = MsgSubmitEvidence;
MsgSubmitEvidence.runtime = protobuf_1.proto3;
MsgSubmitEvidence.typeName = "cosmos.evidence.v1beta1.MsgSubmitEvidence";
MsgSubmitEvidence.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "submitter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "evidence", kind: "message", T: protobuf_1.Any },
]);
/**
 * MsgSubmitEvidenceResponse defines the Msg/SubmitEvidence response type.
 *
 * @generated from message cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse
 */
class MsgSubmitEvidenceResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * hash defines the hash of the evidence.
         *
         * @generated from field: bytes hash = 4;
         */
        this.hash = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSubmitEvidenceResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSubmitEvidenceResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSubmitEvidenceResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MsgSubmitEvidenceResponse, a, b);
    }
}
exports.MsgSubmitEvidenceResponse = MsgSubmitEvidenceResponse;
MsgSubmitEvidenceResponse.runtime = protobuf_1.proto3;
MsgSubmitEvidenceResponse.typeName = "cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse";
MsgSubmitEvidenceResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 4, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);

"use strict";
// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/auth/v1beta1/auth.proto (package cosmos.auth.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = exports.ModuleCredential = exports.ModuleAccount = exports.BaseAccount = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * BaseAccount defines a base account type. It contains all the necessary fields
 * for basic account functionality. Any custom account type should extend this
 * type for additional functionality (e.g. vesting).
 *
 * @generated from message cosmos.auth.v1beta1.BaseAccount
 */
class BaseAccount extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string address = 1;
         */
        this.address = "";
        /**
         * @generated from field: uint64 account_number = 3;
         */
        this.accountNumber = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 sequence = 4;
         */
        this.sequence = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BaseAccount().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BaseAccount().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BaseAccount().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BaseAccount, a, b);
    }
}
exports.BaseAccount = BaseAccount;
BaseAccount.runtime = protobuf_1.proto3;
BaseAccount.typeName = "cosmos.auth.v1beta1.BaseAccount";
BaseAccount.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pub_key", kind: "message", T: protobuf_1.Any },
    { no: 3, name: "account_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * ModuleAccount defines an account for modules that holds coins on a pool.
 *
 * @generated from message cosmos.auth.v1beta1.ModuleAccount
 */
class ModuleAccount extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * @generated from field: repeated string permissions = 3;
         */
        this.permissions = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ModuleAccount().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ModuleAccount().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ModuleAccount().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ModuleAccount, a, b);
    }
}
exports.ModuleAccount = ModuleAccount;
ModuleAccount.runtime = protobuf_1.proto3;
ModuleAccount.typeName = "cosmos.auth.v1beta1.ModuleAccount";
ModuleAccount.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "base_account", kind: "message", T: BaseAccount },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "permissions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * ModuleCredential represents a unclaimable pubkey for base accounts controlled by modules.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.auth.v1beta1.ModuleCredential
 */
class ModuleCredential extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * module_name is the name of the module used for address derivation (passed into address.Module).
         *
         * @generated from field: string module_name = 1;
         */
        this.moduleName = "";
        /**
         * derivation_keys is for deriving a module account address (passed into address.Module)
         * adding more keys creates sub-account addresses (passed into address.Derive)
         *
         * @generated from field: repeated bytes derivation_keys = 2;
         */
        this.derivationKeys = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ModuleCredential().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ModuleCredential().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ModuleCredential().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ModuleCredential, a, b);
    }
}
exports.ModuleCredential = ModuleCredential;
ModuleCredential.runtime = protobuf_1.proto3;
ModuleCredential.typeName = "cosmos.auth.v1beta1.ModuleCredential";
ModuleCredential.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "derivation_keys", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
]);
/**
 * Params defines the parameters for the auth module.
 *
 * @generated from message cosmos.auth.v1beta1.Params
 */
class Params extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 max_memo_characters = 1;
         */
        this.maxMemoCharacters = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 tx_sig_limit = 2;
         */
        this.txSigLimit = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 tx_size_cost_per_byte = 3;
         */
        this.txSizeCostPerByte = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 sig_verify_cost_ed25519 = 4;
         */
        this.sigVerifyCostEd25519 = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 sig_verify_cost_secp256k1 = 5;
         */
        this.sigVerifyCostSecp256k1 = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Params().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Params().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Params().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Params, a, b);
    }
}
exports.Params = Params;
Params.runtime = protobuf_1.proto3;
Params.typeName = "cosmos.auth.v1beta1.Params";
Params.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "max_memo_characters", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "tx_sig_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "tx_size_cost_per_byte", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sig_verify_cost_ed25519", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "sig_verify_cost_secp256k1", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);

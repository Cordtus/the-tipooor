"use strict";
// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/auth/module/v1/module.proto (package cosmos.auth.module.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleAccountPermission = exports.Module = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * Module is the config object for the auth module.
 *
 * @generated from message cosmos.auth.module.v1.Module
 */
class Module extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * bech32_prefix is the bech32 account prefix for the app.
         *
         * @generated from field: string bech32_prefix = 1;
         */
        this.bech32Prefix = "";
        /**
         * module_account_permissions are module account permissions.
         *
         * @generated from field: repeated cosmos.auth.module.v1.ModuleAccountPermission module_account_permissions = 2;
         */
        this.moduleAccountPermissions = [];
        /**
         * authority defines the custom module authority. If not set, defaults to the governance module.
         *
         * @generated from field: string authority = 3;
         */
        this.authority = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Module().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Module().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Module().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Module, a, b);
    }
}
exports.Module = Module;
Module.runtime = protobuf_1.proto3;
Module.typeName = "cosmos.auth.module.v1.Module";
Module.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "bech32_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "module_account_permissions", kind: "message", T: ModuleAccountPermission, repeated: true },
    { no: 3, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ModuleAccountPermission represents permissions for a module account.
 *
 * @generated from message cosmos.auth.module.v1.ModuleAccountPermission
 */
class ModuleAccountPermission extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * account is the name of the module.
         *
         * @generated from field: string account = 1;
         */
        this.account = "";
        /**
         * permissions are the permissions this module has. Currently recognized
         * values are minter, burner and staking.
         *
         * @generated from field: repeated string permissions = 2;
         */
        this.permissions = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ModuleAccountPermission().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ModuleAccountPermission().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ModuleAccountPermission().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ModuleAccountPermission, a, b);
    }
}
exports.ModuleAccountPermission = ModuleAccountPermission;
ModuleAccountPermission.runtime = protobuf_1.proto3;
ModuleAccountPermission.typeName = "cosmos.auth.module.v1.ModuleAccountPermission";
ModuleAccountPermission.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permissions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);

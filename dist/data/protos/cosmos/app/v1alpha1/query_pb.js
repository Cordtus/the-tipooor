"use strict";
// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file cosmos/app/v1alpha1/query.proto (package cosmos.app.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryConfigResponse = exports.QueryConfigRequest = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const config_pb_js_1 = require("./config_pb.js");
/**
 * QueryConfigRequest is the Query/Config request type.
 *
 * @generated from message cosmos.app.v1alpha1.QueryConfigRequest
 */
class QueryConfigRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConfigRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConfigRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConfigRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryConfigRequest, a, b);
    }
}
exports.QueryConfigRequest = QueryConfigRequest;
QueryConfigRequest.runtime = protobuf_1.proto3;
QueryConfigRequest.typeName = "cosmos.app.v1alpha1.QueryConfigRequest";
QueryConfigRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * QueryConfigRequest is the Query/Config response type.
 *
 * @generated from message cosmos.app.v1alpha1.QueryConfigResponse
 */
class QueryConfigResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConfigResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConfigResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConfigResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(QueryConfigResponse, a, b);
    }
}
exports.QueryConfigResponse = QueryConfigResponse;
QueryConfigResponse.runtime = protobuf_1.proto3;
QueryConfigResponse.typeName = "cosmos.app.v1alpha1.QueryConfigResponse";
QueryConfigResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: config_pb_js_1.Config },
]);
